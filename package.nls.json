{
    "extension.description": "Diagnose SQL files using Anysqldiag.",
    "command.restartServer": "Restart Server",
    "settings.args.description": "Arguments passed to anysqldiag. Each argument should be provided as a separate string in the array. \n Examples:  \n- `\"anysqldiag.args\": [\"--max_errors=5\"]` \n - `\"anysqldiag.args\": [\"--max_errors=5\", \"--dialect=spark\"]`",
    "settings.cwd.description": "Sets the current working directory. By default, it uses the root directory of the workspace `${workspaceFolder}`. You can set it to `${fileDirname}` to use the parent folder of the file being diagnosed as the working directory.",
    "settings.enabled.description": "Enable/disable diagnosis of SQL files with Anysqldiag.",
    "settings.severity.description": "Not supported",
    "settings.lintOnChange.description": "Enable diagnosis as you type.",
    "settings.path.description": "Path or command to be used by the extension. Accepts an array of a single or multiple strings. If passing a command, each argument should be provided as a separate string in the array. If set to `[\"anysqldiag\"]`, it will use the version of anysqldiag available in the `PATH` environment variable. Note: Using this option may slowdown. \nExamples: \n- `[\"~/global_env/anysqldiag\"]` \n- `[\"conda\", \"run\", \"-n\", \"lint_env\", \"python\", \"-m\", \"anysqldiag\"]` \n `[\"anysqldiag\"]`",
    "settings.ignorePatterns.description": "Configure [glob patterns](https://docs.python.org/3/library/fnmatch.html) as supported by the fnmatch Python library to exclude files or folders from being diagnosed with Anysqldiag.",
    "settings.importStrategy.description": "Defines which AnySqlDiag binary to be used. When set to `useBundled`, the extension will use the AnySqlDiag binary that is shipped with the extension. When set to `fromEnvironment`, the extension will attempt to use the AnySqlDiag binary and all dependencies that are available in the currently selected environment. Note: If the extension can't find a valid AnySqlDiag binary in the selected environment, it will fallback to using the AnySqlDiag binary that is shipped with the extension The `AnySqlDiag.path` setting may also be ignored when this setting is set to `fromEnvironment`.",
    "settings.importStrategy.useBundled.description": "Always use the bundled version of AnySqlDiag shipped with the extension.",
    "settings.importStrategy.fromEnvironment.description": "Use AnySqlDiag from the selected environment. If the extension fails to find a valid AnySqlDiag binary, it will fallback to using the bundled version of AnySqlDiag.",
    "settings.interpreter.description": "Path to a Python executable or a command that will be used to launch the Anysqldiag server and any subprocess. Accepts an array of a single or multiple strings.  When set to `[]`, the extension will use the path to the selected Python interpreter. If passing a command, each argument should be provided as a separate string in the array.",
    "settings.showNotifications.description": "Controls when notifications are shown by this extension.  Accepted values are `onError`, `onWarning`, `always` and `off`.",
    "settings.showNotifications.off.description": "Never display a notification. Any errors or warning are still available in the logs.",
    "settings.showNotifications.onError.description": "Show notifications for errors.",
    "settings.showNotifications.onWarning.description": "Show notifications for errors and warnings.",
    "settings.showNotifications.always.description": "Show all notifications."
}